<?xml version="1.0"?>
<project name="AlgoDemo" default="build">

<!--
An Ant script to build java app which includes an external java project
More information:
https://ant.apache.org/manual/tutorial-HelloWorldWithAnt.html
-->
    
<!--Configuration-->
<property name="app.name" value="algodemo"/>

<property name="src.dir" value="src"/>
<property name="build.dir" value="build"/>
<property name="dist.dir" value="dist"/>
<property name="dist.lib.dir" location="dist/lib" />
<property name="app.jar" value="${app.name}.jar"/>

<property name="ext.project.dakalgo.dir" value="../DakAlgo"/>
<property name="ext.project.dakalgo.jar" value="${ext.project.dakalgo.dir}/dist/dakalgo.jar"/>

<!--Doc config-->
<property name="doc.title" value="Tutorial 5: Algorithm Demo Application - jHackshop@Dakside"/>
<property name="doc.dir" value="doc/javadoc"/>

<!--Classpath build-->
<!--Define classpath for compiling-->
<path id="build.classpath">
	<fileset dir="${ext.project.dakalgo.dir}">
		<include name="dist/dakalgo.jar" />
	</fileset>
</path>
	
<!--Define classpath for java app runtime -->
<path id="runtime.classpath">
	<fileset dir="${dist.dir}">
		<include name="lib/*.jar" />
	</fileset>
</path>

<!--Targets-->
<!-- ref: https://ant.apache.org/manual/ -->
<target name="prepare" description="Create build dir">
    <!--Create build dir for output files-->
    <mkdir dir="${build.dir}"/>
	<mkdir dir="${lib.dir}"/>
    <mkdir dir="${dist.dir}"/>
	<mkdir dir="${dist.lib.dir}" />
	<!-- Execute ant run for external project and get the jar file-->
	<ant antfile="${ext.project.dakalgo.dir}/build.xml" dir="${ext.project.dakalgo.dir}" inheritAll="false" />
	<!-- <copy file="${ext.project.dakalgo.jar}" todir="${lib.dir}"/> -->
</target>

<!--Include external lib here, modify classpath if required--> 
<target name="compile" depends="clean,prepare" description="Compile source code">
   <javac destdir="${build.dir}" classpathref="build.classpath" debug="false" optimize="true">
      <src path="${src.dir}"/>
   </javac>
</target>

<!--Copy the external lib to distribution-->
<target name="copy-dependencies" depends="prepare">
	<copy todir="${dist.lib.dir}">
		<fileset dir="${ext.project.dakalgo.dir}/dist" includes="**/*.jar"/>
	</copy>	

	<!-- IMPORTANT! "pathconvert block" must be included in
	this target, i.e. copy-dependencies, so that the "dist.lib.dir" can be 
	recognized and included into classpath when packaging in jar-->
	
	<!-- Construct the external libraries classpath name for jar -->
	<pathconvert property="classpath.name" pathsep=" ">
		<path refid="runtime.classpath" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*.jar" to="lib/*.jar" />
			</chainedmapper>
		</mapper>
	</pathconvert>
</target>

<!-- Build jar with external lib included into classpath --> 	
<target name="package" depends="clean,compile,copy-dependencies">
	<!--echo message for debugging-->
	<echo message="classpath.name: ${classpath.name}" />
	
	<jar destfile="${dist.dir}/${app.jar}" basedir="${build.dir}">
		<manifest>
			<attribute name="Main-Class" value="dakside.MainApp"/>
			<attribute name="Class-Path" value="${classpath.name}" />
		</manifest>
	</jar>
</target>

<!-- Generate documentation -->
<target name="gendoc" description="Generate Java doc">
    <javadoc packagenames="dakside.*"
             sourcepath="src"
             defaultexcludes="yes"
             destdir="${doc.dir}"
             author="true"
             version="true"
             windowtitle="${doc.title}">
    <doctitle><![CDATA[${doc.title}]]></doctitle>
    <bottom><![CDATA[<i>Copyright &#169; 2015 Dakside Group. All Rights Reserved.</i>]]></bottom>
    <group title="dakside Packages" packages="dakside.*"/>
    <link href="http://www.dakside.org"/>
    </javadoc>
</target>

<target name="build" depends="package,gendoc">
</target>

<target name="run" depends="package">
	<java jar="${dist.dir}/${app.jar}" fork="true"/>
</target>

<!-- Clean everything -->
<target name="clean" description="Clean output directories">
   <delete dir="${build.dir}" />
   <delete dir="${dist.dir}" />
   <delete dir="${doc.dir}" />
</target>

</project>